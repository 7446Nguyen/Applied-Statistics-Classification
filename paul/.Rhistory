colnames(dfBartlett) <- c("Chi-Square Statistic", "Degrees of Freedom", "Wilks' Lambda", "p-value")
subDF.Train.numeric$shot_made_flag <- as.factor(subDF.Train.numeric$shot_made_flag)
#subDF.Train.numeric$shot_made_flag <- ifelse(subDF.Train.numeric$shot_made_flag=="1", "made", "not_made")
subDF.Train.numeric <- subDF.Train.numeric %>% mutate_if(is.integer, as.numeric) %>% mutate_if(is.character, as.factor) %>% data.frame()
train.Control <- caret::trainControl(method = "repeatedcv",
number = 15,
repeats = 10,
summaryFunction = twoClassSummary,
classProbs = T)
qda.filtered <- train(shot_made_flag ~ .
, data = subDF.Train.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
test_pred.qda.filtered <- suppressWarnings(predict(qda.filtered, newdata = subDF.Test.numeric))
confusionMatrix(table(test_pred.qda.filtered, subDF.Test.numeric$shot_made_flag))
train.Control <- caret::trainControl(method = "repeatedcv",
number = 5,
repeats = 10,
summaryFunction = twoClassSummary,
classProbs = T)
qda.filtered <- train(shot_made_flag ~ .
, data = subDF.Train.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
test_pred.qda.filtered <- suppressWarnings(predict(qda.filtered, newdata = subDF.Test.numeric))
confusionMatrix(table(test_pred.qda.filtered, subDF.Test.numeric$shot_made_flag))
train.Control <- caret::trainControl(method = "repeatedcv",
number = 5,
repeats = 35,
summaryFunction = twoClassSummary,
classProbs = T)
qda.filtered <- train(shot_made_flag ~ .
, data = subDF.Train.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
test_pred.qda.filtered <- suppressWarnings(predict(qda.filtered, newdata = subDF.Test.numeric))
#droplevels(subDF.Test.numeric$shot_made_flag) class(dfTest.numeric$shot_made_flag)
confusionMatrix(table(test_pred.qda.filtered, subDF.Test.numeric$shot_made_flag))
qda.filtered <- train(shot_made_flag ~ .
, data = subDF.Train.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Accuracy"  #"Spec"
)
ggplot(data = df, aes(x = shot_made_flag, y = shot_distance, fill = shot_type)) + geom_boxplot() +
scale_fill_few(palette = "Dark") + theme_few() + ggtitle("Basketball Shots over Distance from Basket") +
theme(panel.background = element_rect(fill = 'ivory1'))
plot(df$shot_distance, df$shot_made_flag, pch = '*')
ggplot(shotsTaken, aes(x=loc_x, y=loc_y)) +
geom_point(aes(colour = df$shot_type))
shotsTaken <- data.frame(df$loc_x, df$loc_y, df$shot_distance)
colnames(shotsTaken) <- c("loc_x", "loc_y", "shot_distance")
# simple plot using EVENT_TYPE to colour the dots
ggplot(shotsTaken, aes(x=loc_x, y=loc_y)) +
geom_point(aes(colour = df$shot_type))
confusionMatrix(table(test_pred.qda.filtered, subDF.Test.numeric$shot_made_flag))
confusion_matrix_results <- confusionMatrix(table(test_pred.qda.filtered, subDF.Test.numeric$shot_made_flag))
confusion_matrix_results$overall
confusion_matrix_results$positive
confusion_matrix_results$byClass
data.frame(confusion_matrix_results$byClass)
confusionMatrixQDA.DF <- data.frame(confusion_matrix_results$byClass)
confusionMatrixQDA.DF <- data.frame(confusion_matrix_results)
confusion_matrix_results$byClass
class(confusion_matrix_results$byClass)
confusion_matrix_results$byClass[[1]]
confusion_matrix_results$byClass[[2]]
confusion_matrix_results$byClass[[3]]
confusion_matrix_results$byClass[[4]]
confusion_matrix_results$byClass[[5]]
confusion_matrix_results$byClass[[6]] # Neg Pred Value
confusion_matrix_results$byClass[[7]]
confusion_matrix_results$byClass[[11]] # Balanced Accuracy
confusion_matrix_results$table
(confusion_matrix_results$table[2,1] + confusion_matrix_results[1,2]) / sum(confusion_matrix_results$table)
confusion_matrix_results$table[2,1]
confusion_matrix_results[1,2]
dim(confusion_matrix_results)
confusion_matrix_results$table[2,1]
confusion_matrix_results[1,2]
table(confusion_matrix_results[1,2])
data.frame(confusion_matrix_results)
class(confusion_matrix_results)
confusion_matrix_results[2,2]
confusion_matrix_results$table[2,1]
confusion_matrix_results$table[3,1]
confusion_matrix_results$table[2,1]
confusion_matrix_results$table[2,2]
confusion_matrix_results$table[1,2]
(confusion_matrix_results$table[2,1] + confusion_matrix_results$table[1,2]) / sum(confusion_matrix_results$table)
misclassification.QDA <- (confusion_matrix_results$table[2,1] + confusion_matrix_results$table[1,2]) / sum(confusion_matrix_results$table)
kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Balanced Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification Rate" = misclassification.QDA),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center")
kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Balanced Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification Rate" = misclassification.QDA),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center")
kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Balanced Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification Rate" = misclassification.QDA),
format="LaTeX", booktabs = T)  %>%
kable_styling(position = "center")
kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Balanced Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification Rate" = misclassification.QDA),
format="markdown", booktabs = T)
kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]]),
#  "Precision" = confusion_matrix_results$byClass[[5]],
#  "Accuracy" = confusion_matrix_results$byClass[[11]],
# "Misclassification" = misclassification.QDA),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center")
kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="LaTeX", booktabs = T)  %>%
kable_styling(position = "center")
kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center")
df <- read.csv("./modelingKobeData.csv", header=T, sep=",", strip.white=T, stringsAsFactors = F, na.strings=c(""))
badNews <- "Sorry, but your math is off and the transformations were not performed. Please update and try again."
tryCatch(
{
# Convert all integers to numeric and characters to factors with levels:
df <- df %>% mutate_if(is.integer, as.numeric) %>% mutate_if(is.character, as.factor) %>% data.frame()
df <- df %>%
subset(select=-c(team_id, # dropping since this is a uniform distribution of data
team_name, # dropping since this is a uniform distribution of data. Also collinear with team_id
action_type, # dropping this in favor of combined_shot_type
shot_zone_area, # this is ambiguous and less descriptive than geospatial data
shot_zone_basic, # this is ambiguous and less descriptive than geospatial data
shot_zone_range, # this is ambiguous and less descriptive than geospatial data
matchup # removing in favor of opponent; Kobe only played for LAL so that will never change
)
)
# create numeric dataframe for correlation plot
df.numeric <- df %>% keep(is.numeric)
},
error = function(e)
{
badNews
}
)
shotsTaken <- data.frame(df$loc_x, df$loc_y, df$shot_distance)
colnames(shotsTaken) <- c("loc_x", "loc_y", "shot_distance")
# simple plot using EVENT_TYPE to colour the dots
ggplot(shotsTaken, aes(x=loc_x, y=loc_y)) +
geom_point(aes(colour = df$shot_type))
df[which(df$loc_y > 300),"shot_type"] <- "3PT Field Goal"
# Convert the points to integer values since they have integer value in reality
df$shot_type <- ifelse(df$shot_type=="2PT Field Goal", 2, 3)
corrplot::corrplot(cor(df.numeric %>% subset(select=-c(shot_made_flag)))
, title = "Correlation of Quantitative Predictor Variables, Before Variable Elimination"
, type = "lower"
, tl.pos = "ld"
, method = "square"
, tl.cex = 0.65
, tl.col = 'red'
, order = "alphabet"
, diag = F
, mar=c(0,0,5,0)
, bg="ivory1"
,tl.srt=.05
)
df <- df %>% subset(select=-c(lat, # dropping lat because it is collinear with loc_y and shot_distance
lon, # dropping lon because it is collinear with loc_x and shot_distance
period, # dropping period in favor of game event id because game event id is more descriptive and continuous
playoffs # dropping playoffs for game_id; game ID can capture playoffs seasonally
)
)
df.numeric <- df %>% keep(is.numeric) %>% mutate_if(is.integer, as.numeric)
dfTrain <- df[which(!is.na(df$shot_made_flag)),]
prediction.Data <- df[which(is.na(df$shot_made_flag)),]
test_sample_size <- floor(0.75 * nrow(dfTrain))
set.seed(123)
train_ind <- sample(seq_len(nrow(dfTrain)), size = test_sample_size)
subDF.Train <- dfTrain[train_ind, ] #75% training
subDF.Test <- dfTrain[-train_ind, ] # 25% testing
dfTrain.numeric <- df.numeric[which(!is.na(df.numeric$shot_made_flag)),]
prediction.Data.numeric <- df.numeric[which(is.na(df.numeric$shot_made_flag)),]
dfTrain.numeric$shot_made_flag <- as.factor(dfTrain.numeric$shot_made_flag)
dfTrain.numeric$shot_made_flag <- ifelse(dfTrain.numeric$shot_made_flag=="1", "made", "not_made")
dfTrain.numeric <- dfTrain.numeric %>% mutate_if(is.integer, as.numeric) %>% mutate_if(is.character, as.factor) %>% data.frame()
test_sample_size <- floor(0.75 * nrow(dfTrain.numeric))
set.seed(123)
train_ind <- sample(seq_len(nrow(dfTrain.numeric)), size = test_sample_size)
subDF.Train.numeric <- dfTrain.numeric[train_ind, ] #75% training
subDF.Test.numeric <- dfTrain.numeric[-train_ind, ]
Bartlett_ChiSq <- rrcov::Wilks.test(shot_made_flag ~ ., data=dfTrain.numeric, method = "c", approximation = "Bartlett")
Bartlett_ChiSq
format(round(Bartlett_ChiSq$p.value, 2), nsmall=4)
# Wilks' Lambda plus degrees of freedom used in Bartlett's chi-squared test
WilksDegreesofFreedom <- rbind(as.numeric(paste0(Bartlett_ChiSq$parameter, sep = " ")))
# p-value from Bartlett's test
Bartlett_ChiSq$p.value
Bartletts_p <- format(round(as.numeric(Bartlett_ChiSq$p.value), 2), nsmall=4)
# Because Bartlett's p-value is less than 0.0001 (indicated above), updating to shorter form:
Bartletts_p = ifelse(Bartlett_ChiSq$p.value < 0.0001, "p < 0.0001", Bartlett_ChiSq$p.value)
#Bartletts_p <- "p < 0.0001"
dfBartlett <- data.frame(WilksDegreesofFreedom, Bartlett_ChiSq$wilks, Bartletts_p)
colnames(dfBartlett) <- c("Chi-Square Statistic", "Degrees of Freedom", "Wilks' Lambda", "p-value")
kable(data.frame("Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
"Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
"Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
"p-value" = Bartletts_p),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center")
kobe.qda <- qda(shot_made_flag ~ ., CV=T, data=dfTrain.numeric)
data.frame(mean(kobe.qda$posterior[,1]), mean(kobe.qda$posterior[,2]))
shot_made_flagg <- rbind("0", "1")
proportion <- rbind(mean(kobe.qda$posterior[,1]), mean(kobe.qda$posterior[,2]))
data.frame(shot_made_flagg, proportion) # Class Level Information
subDF.Train.numeric$shot_made_flag <- as.factor(subDF.Train.numeric$shot_made_flag)
#subDF.Train.numeric$shot_made_flag <- ifelse(subDF.Train.numeric$shot_made_flag=="1", "made", "not_made")
subDF.Train.numeric <- subDF.Train.numeric %>% mutate_if(is.integer, as.numeric) %>% mutate_if(is.character, as.factor) %>% data.frame()
train.Control <- caret::trainControl(method = "repeatedcv",
number = 5,
repeats = 35,
summaryFunction = twoClassSummary,
classProbs = T)
qda.filtered <- train(shot_made_flag ~ .
, data = subDF.Train.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Accuracy"  #"Spec"
)
test_pred.qda.filtered <- suppressWarnings(predict(qda.filtered, newdata = subDF.Test.numeric))
#droplevels(subDF.Test.numeric$shot_made_flag) class(dfTest.numeric$shot_made_flag)
confusion_matrix_results <- confusionMatrix(table(test_pred.qda.filtered, subDF.Test.numeric$shot_made_flag))
confusion_matrix_results$byClass[[1]] # Sensitivity
confusion_matrix_results$byClass[[2]] # Specificity
confusion_matrix_results$byClass[[3]] # Pos Pred Value
confusion_matrix_results$byClass[[4]] # Neg Pred Value
confusion_matrix_results$byClass[[5]] # Precision
confusion_matrix_results$byClass[[11]] # Balanced Accuracy
misclassification.QDA <- (confusion_matrix_results$table[2,1] + confusion_matrix_results$table[1,2]) / sum(confusion_matrix_results$table)
kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center")
confusion_matrix_results$table[2,1]
install.packages("rdrr")
as.table(misclassification.QDA)
misclassification.QDA
as.table(confusion_matrix_results)
(confusion_matrix_results$table[2,1] + confusion_matrix_results$table[1,2]) / sum(confusion_matrix_results$table)
kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center")
suppressWarnings(kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center"))
suppressWarnings(kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="markdown", booktabs = T))
misclassification.QDA <- (confusion_matrix_results$table[2,1] + confusion_matrix_results$table[1,2]) / sum(confusion_matrix_results$table)
suppressWarnings(kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="latex", booktabs = T)  %>%
kable_styling(latex_options = "striped"))
suppressWarnings(kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="latex", booktabs = T)  %>%
kable_styling(latex_options = "striped"))
suppressWarnings(kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="latex", booktabs = T)  %>%
kable_styling(latex_options = "hold_position"))
kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="latex", booktabs = T)  %>%
kable_styling(latex_options = "hold_position")
kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="latex", booktabs = T)  %>%
kable_styling(latex_options = "hold_position")
suppressWarnings(kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="latex", booktabs = T)  %>%
kable_styling(position = "center"))
kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="latex", booktabs = T)  %>%
kable_styling(position = "center")
suppressWarnings(kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center"))
suppressWarnings(kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="latex", booktabs = T)  %>%
kable_styling(latex_options="striped"))
kable(data.frame("Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
"Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
"Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
"p-value" = Bartletts_p),
format="latex", booktabs = T, caption = "Bartlett's Test Results")  %>%
kable_styling(latex_options = "striped", full_width = F)
kable(data.frame("Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
"Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
"Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
"p-value" = Bartletts_p),
format="latex", booktabs = T, caption = "Bartlett's Test Results") %>%
kable_styling(latex_options = "striped", full_width = F)
supressWarnings(kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center"))
supresswarnings(kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center"))
suppressWarnings(kable(data.frame("Sensitivity" = confusion_matrix_results$byClass[[1]],
"Specificity" = confusion_matrix_results$byClass[[2]],
"Pos Pred Value" = confusion_matrix_results$byClass[[3]],
"Neg Pred Value" = confusion_matrix_results$byClass[[4]],
"Precision" = confusion_matrix_results$byClass[[5]],
"Accuracy" = confusion_matrix_results$byClass[[11]],
"Misclassification" = misclassification.QDA),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center"))
corrplot::corrplot(cor(df.numeric %>% subset(select=-c(shot_made_flag)))
, title = "Correlation among Predictor Variables"
, type = "lower"
, tl.pos = "ld"
, method = "square"
, tl.cex = 0.65
, tl.col = 'red'
, order = "alphabet"
, diag = F
, mar=c(0,0,5,0)
, bg="ivory1"
,tl.srt=.05
)
df <- df %>% subset(select=-c(lat, # dropping lat because it is collinear with loc_y and shot_distance
lon, # dropping lon because it is collinear with loc_x and shot_distance
period, # dropping period in favor of game event id because game event id is more descriptive and continuous
playoffs # dropping playoffs for game_id; game ID can capture playoffs seasonally
)
)
correlation.matrix <- Hmisc::rcorr(as.matrix(df.numeric), type="pearson")
corDF <- data.frame(flattenCorrMatrix(correlation.matrix$r, correlation.matrix$P))
corDF.ordered <- data.frame(corDF[order(-corDF$cor),])
collinear.correlation <- corDF[which(corDF$cor >= 0.50),]
collinear.correlation <- data.frame(collinear.correlation[order(-collinear.correlation$cor),])
collinear.correlation
class(collinear.correlation)
table(collinear.correlation)
head(data.frame(collinear.correlation), 6)
head(data.frame(collinear.correlation), 6) %>% colnames(collinear.correlation) = c("Row", "Column", "Correlation", :"p-value")
collinear.correlation_Ten <- data.frame(collinear.correlation), 10)
collinear.correlation_Ten <- head(data.frame(collinear.correlation), 10)
colnames(collinear.correlation_Ten) = c("Row", "Column", "Correlation", "p-value")
collinear.correlation_Ten
collinear.correlation_Ten
collinear.correlation_Ten <- head(data.frame(collinear.correlation, row.names = F), 10)
table(collinear.correlation[order(-collinear.correlation$cor),])
head(table(collinear.correlation, row.names = F), 10)
head(table(collinear.correlation), 10)
head(data.frame(collinear.correlation), 10)
table(head(data.frame(collinear.correlation), 10))
kable(collinear.correlation_Ten)
collinear.correlation <- table(collinear.correlation[order(-collinear.correlation$cor),])
collinear.correlation_Ten <- head(data.frame(collinear.correlation), 10)
colnames(collinear.correlation_Ten) = c("Row", "Column", "Correlation", "p-value")
kable(collinear.correlation_Ten)
kable(data.frame("Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
"Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
"Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
"p-value" = Bartletts_p),
format="latex", booktabs = T)  %>%
kable_styling(position = "center")
dplyr::sample_n(collinear.correlation_Ten, 10)
setwd("C:/Users/Pablo/Desktop/DB7330/results_analysis/results.csv")
my_data <- read.csv("C:/Users/Pablo/Desktop/DB7330/results_analysis/results.csv")
str(my_data)
my_data <- my_data[order(my_data$schema, -my_data$block_size, my_data$time),]
Schmea <- my_data$schema
BlockSize <- my_data$block_size
RunTime <- my_data$time
aov(RunTime ~ Schema + BlockSize, data = my_data)
Schema <- my_data$schema
res.aov2 <- aov(RunTime ~ Schema + BlockSize, data = my_data)
summary(res.aov2)
anova(res.aov2)

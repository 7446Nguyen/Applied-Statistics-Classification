Bartlett_ChiSq <- rrcov::Wilks.test(shot_made_flag ~ ., data=dfTrain.numeric, method = "c", approximation = "Bartlett")
format(round(Bartlett_ChiSq$p.value, 2), nsmall=4)
WilksDegreesofFreedom <- rbind(as.numeric(paste0(Bartlett_ChiSq$parameter, sep = " ")))
format(round(Bartlett_ChiSq$p.value, 2), nsmall=4)
dfTrain <- df[which(!is.na(df.numeric$shot_made_flag)),]
Bartlett_ChiSq <- rrcov::Wilks.test(shot_made_flag ~ ., data=dfTrain.numeric, method = "c", approximation = "Bartlett")
format(round(Bartlett_ChiSq$p.value, 2), nsmall=4)
Bartlett_ChiSq <- rrcov::Wilks.test(shot_made_flag ~ ., data=dfTrain.numeric, method = "c", approximation = "Bartlett")
Bartlett_ChiSq
df.numeric$shot_made_flag
dfTrain <- df.numeric[which(!is.na(df.numeric$shot_made_flag)),]
Bartlett_ChiSq <- rrcov::Wilks.test(shot_made_flag ~ ., data=dfTrain.numeric, method = "c", approximation = "Bartlett")
format(round(Bartlett_ChiSq$p.value, 2), nsmall=4)
dfTrain.numeric <- df.numeric[which(!is.na(df.numeric$shot_made_flag)),]
Bartlett_ChiSq <- rrcov::Wilks.test(shot_made_flag ~ ., data=dfTrain.numeric, method = "c", approximation = "Bartlett")
format(round(Bartlett_ChiSq$p.value, 2), nsmall=4)
Bartlett_ChiSq
WilksDegreesofFreedom <- rbind(as.numeric(paste0(Bartlett_ChiSq$parameter, sep = " ")))
Bartlett_ChiSq$p.value
Bartletts_p <- format(round(as.numeric(Bartlett_ChiSq$p.value), 2), nsmall=4)
Bartletts_p = ifelse(Bartlett_ChiSq$p.value < 0.0001, "p < 0.0001", Bartlett_ChiSq$p.value)
#Bartletts_p <- "p < 0.0001"
dfBartlett <- data.frame(WilksDegreesofFreedom, Bartlett_ChiSq$wilks, Bartletts_p)
colnames(dfBartlett) <- c("Chi-Square Statistic", "Degrees of Freedom", "Wilks' Lambda", "p-value")
kable(data.frame("Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
"Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
"Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
"p-value" = Bartletts_p),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center")
kobe.qda <- qda(shot_made_flag ~ ., CV=T, data=dfTrain.numeric)
data.frame(mean(kobe.qda$posterior[,1]), mean(kobe.qda$posterior[,2]))
shot_made_flagg <- rbind("0", "1")
proportion <- rbind(mean(kobe.qda$posterior[,1]), mean(kobe.qda$posterior[,2]))
data.frame(shot_made_flagg, proportion) # Class Level Information
train.Control <- caret::trainControl(method = "repeatedcv",
number = 25,
repeats = 5,
summaryFunction = twoClassSummary,
classProbs = T)
qda.filtered <- caret::train(shot_made_flag ~ .
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
qda.filtered <- train(shot_made_flag ~ .
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
colnames(dfTrain.numeric)
qda.filtered <- train(shot_made_flag ~ recID + game_event_id, game_id, loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
qda.filtered <- train(shot_made_flag ~ recId + game_event_id, game_id, loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
str(dfTrain.numeric)
unique(dfTrain.numeric$shot_type)
qda.filtered <- train(shot_made_flag ~ recId + game_event_id, game_id, loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
train.Control <- caret::trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
summaryFunction = twoClassSummary,
classProbs = T)
qda.filtered <- train(shot_made_flag ~ recId + game_event_id, game_id, loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
qda.filtered <- train(shot_made_flag ~ recId + game_event_id, game_id, loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
#, metric = "Spec"
)
qda.filtered <- train(shot_made_flag ~ recId
#+ game_event_id, game_id, loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
qda.filtered <- train(shot_made_flag ~ recId
#+ game_event_id, game_id, loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
#   shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
class(dfTrain.numeric$shot_made_flag)
dfTrain.numeric$shot_made_flag <- as.integer(dfTrain.numeric$shot_made_flag)
qda.filtered <- train(shot_made_flag ~ recId
#+ game_event_id, game_id, loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
#   shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
dfTrain.numeric$shot_made_flag <- as.factor(dfTrain.numeric$shot_made_flag)
qda.filtered <- train(shot_made_flag ~ recId
#+ game_event_id, game_id, loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
#   shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
dfTrain.numeric$shot_made_flag <- ifelse(dfTrain.numeric$shot_made_flag=="1", "made", "not_made")
dfTrain.numeric$shot_made_flag <- ifelse(dfTrain.numeric$shot_made_flag=="1", "made", "not_made")
dfTrain.numeric$shot_made_flag <- as.factor(dfTrain.numeric$shot_made_flag)
qda.filtered <- train(shot_made_flag ~ recId
#+ game_event_id, game_id, loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
#   shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
qda.filtered <- train(shot_made_flag ~ recId + game_event_id + game_id + loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
dfTrain.numeric$shot_made_flag <- ifelse(dfTrain.numeric$shot_made_flag=="made", 1, 0)
qda.filtered <- train(shot_made_flag ~ recId + game_event_id + game_id + loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
dfTrain.numeric$shot_made_flag <- as.factor(dfTrain.numeric$shot_made_flag)
qda.filtered <- train(shot_made_flag ~ recId + game_event_id + game_id + loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
dfTrain.numeric$shot_made_flag <- ifelse(dfTrain.numeric$shot_made_flag==1, "made", "not_made")
qda.filtered <- train(shot_made_flag ~ recId + game_event_id + game_id + loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
train(shot_made_flag ~ recId + game_event_id + game_id + loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
dfTrain.numeric <- dfTrain.numeric %>% mutate_if(is.integer, as.numeric) %>% mutate_if(is.character, as.factor) %>% data.frame()
qda.filtered <- train(shot_made_flag ~ recId + game_event_id + game_id + loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
qda.filtered <- train(shot_made_flag ~ .
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
qda.filtered <- train(shot_made_flag ~ .
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
# , preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
#   , metric = "Spec"
)
str(dfTrain.numeric)
class(dfTrain.numeric)
train.Control <- caret::trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
summaryFunction = twoClassSummary,
classProbs = F)
qda.filtered <- train(shot_made_flag ~ .
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
train.Control <- caret::trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
summaryFunction = twoClassSummary,
classProbs = T)
qda.filtered <- train(shot_made_flag ~ .
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
train.Control <- caret::trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
summaryFunction = twoClassSummary,
classProbs = F)
qda.filtered <- train(shot_made_flag ~ recId + game_event_id + game_id + loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
qda.filtered <- train(shot_made_flag ~ .
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
str(dfTrain.numeric)
nrow(dfTrain.numeric)
df.numeric <- df %>% keep(is.numeric) %>% mutate_if(is.integer, as.numeric)
correlation.matrix <- Hmisc::rcorr(as.matrix(df.numeric), type="pearson")
corDF <- data.frame(flattenCorrMatrix(correlation.matrix$r, correlation.matrix$P))
corDF.ordered <- data.frame(corDF[order(-corDF$cor),])
collinear.correlation <- corDF[which(corDF$cor >= 0.50),]
collinear.correlation <- data.frame(collinear.correlation[order(-collinear.correlation$cor),])
collinear.correlation
dfTrain <- df[which(!is.na(df$shot_made_flag)),]
dfTest <- df[which(is.na(df$shot_made_flag)),]
dfTrain.numeric <- df.numeric[which(!is.na(df.numeric$shot_made_flag)),]
dfTrain.numeric <- df.numeric[which(!is.na(df.numeric$shot_made_flag)),]
Bartlett_ChiSq <- rrcov::Wilks.test(shot_made_flag ~ ., data=dfTrain.numeric, method = "c", approximation = "Bartlett")
# Wilk's Lambda produces significant p-value in Bartlett's test so we need to use a Quadratic Discriminant Analysis instead of Linear
format(round(Bartlett_ChiSq$p.value, 2), nsmall=4)
# Wilks' Lambda plus degrees of freedom used in Bartlett's chi-squared test
WilksDegreesofFreedom <- rbind(as.numeric(paste0(Bartlett_ChiSq$parameter, sep = " ")))
# p-value from Bartlett's test
Bartlett_ChiSq$p.value
Bartletts_p <- format(round(as.numeric(Bartlett_ChiSq$p.value), 2), nsmall=4)
# Because Bartlett's p-value is less than 0.0001 (indicated above), updating to shorter form:
Bartletts_p = ifelse(Bartlett_ChiSq$p.value < 0.0001, "p < 0.0001", Bartlett_ChiSq$p.value)
#Bartletts_p <- "p < 0.0001"
dfBartlett <- data.frame(WilksDegreesofFreedom, Bartlett_ChiSq$wilks, Bartletts_p)
colnames(dfBartlett) <- c("Chi-Square Statistic", "Degrees of Freedom", "Wilks' Lambda", "p-value")
unique(dfTrain.numeric$shot_made_flag)
dfTrain.numeric$shot_made_flag <- ifelse(dfTrain.numeric$shot_made_flag=="1", "made", "not_made")
qda.filtered <- train(shot_made_flag ~ .
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
unique(dfTrain.numeric$shot_made_flag)
qda.filtered <- train(shot_made_flag ~ .
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
qda.filtered <- train(shot_made_flag ~ recId + game_event_id + game_id + loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
train.Control <- caret::trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
summaryFunction = twoClassSummary,
classProbs = T)
qda.filtered <- train(shot_made_flag ~ recId + game_event_id + game_id + loc_x + loc_y + minutes_remaining + seconds_remaining + shot_distance +
shot_type + game_date + shot_id + attendance + arena_temp + avgnoisedb
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
qda.filtered <- train(shot_made_flag ~ .
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
qda.filtered
test_pred.qda.filtered <- predict(qda.filtered, newdata = dfTest)
confusionMatrix(table(test_pred.qda.filtered, dfTest$shot_made_flag))
test_pred.qda.filtered <- predict(qda.filtered, newdata = dfTest.numeric)
test_pred.qda.filtered <- predict(qda.filtered, newdata = dfTest.numeric.out)
?predict
test_pred.qda.filtered <- predict(qda.filtered, newdata = dfTest)
qda.filtered
dfTest.numeric
test_pred.qda.filtered <- predict(qda.filtered, newdata = dfTest.numeric)
dfTest.numeric <- df.numeric[which(is.na(df.numeric$shot_made_flag)),]
test_pred.qda.filtered <- predict(qda.filtered, newdata = dfTest.numeric)
confusionMatrix(table(test_pred.qda.filtered, dfTest$shot_made_flag))
predict(qda.filtered, newdata = dfTest.numeric)
test_pred.qda.filtered <- predict(qda.filtered, newdata = dfTest.numeric)
confusionMatrix(table(test_pred.qda.filtered, dfTest$shot_made_flag))
confusionMatrix(table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag))
dfTest.numeric$shot_made_flag <- as.factor(dfTest.numeric$shot_made_flag)
dfTest.numeric$shot_made_flag <- ifelse(dfTest.numeric$shot_made_flag=="1", "made", "not_made")
dfTest.numeric <- dfTest.numeric %>% mutate_if(is.integer, as.numeric) %>% mutate_if(is.character, as.factor) %>% data.frame()
test_pred.qda.filtered <- predict(qda.filtered, newdata = dfTest.numeric)
confusionMatrix(table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag))
ncol(test_pred.qda.filtered)
ncol(dfTrain.numeric)
ncol(dfTest.numeric)
nrow(dfTrain.numeric)
nrow(dfTest.numeric)
nrow(test_pred.qda.filtered)
nrow(table(test_pred.qda.filtered))
test_pred.qda.filtered <- predict(qda.filtered, newdata = dfTest.numeric)
nrow(table(test_pred.qda.filtered))
confusionMatrix(table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag))
u <- union(test_pred.qda.filtered, dfTest.numeric)
u <- union(test_pred.qda.filtered, dfTest.numeric)
t <- table(factor(test_pred.qda.filtered, u), factor(dfTest.numeric, u))
?predict
test_pred.qda.filtered <- stat::predict(qda.filtered, newdata = dfTest.numeric)
test_pred.qda.filtered <- stats::predict(qda.filtered, newdata = dfTest.numeric)
confusionMatrix(table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag))
test_pred.qda.filtered <- suppressWarnings(predict(qda.filtered, newdata = dfTest.numeric))
confusionMatrix(table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag))
ncol(dfTest.numeric)
ncol(dfTrain.numeric)
confusionMatrix(table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag))
test_pred.qda.filtered <- suppressWarnings(predict(qda.filtered, newdata = dfTest.numeric.filtered))
test_pred.qda.filtered <- suppressWarnings(predict(qda.filtered, newdata = dfTest.numeric))
confusionMatrix(table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag))
table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag)
t <- table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag)
confusionMatrix(t)
confusionMatrix(table(test_pred.qda.filtered, dfTrain.numeric$shot_made_flag))
caret::confusionMatrix(table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag))
nb_fit.filtered <- suppressWarnings(train(shot_made_flag ~ .
, data = dfTrain.filtered
, method = "nb"
, trControl=train.Control
, preProcess = c("center", "scale")
, metric = "Spec"))
nb_fit.filtered <- suppressWarnings(train(shot_made_flag ~ .
, data = dfTrain.filtered
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale")
, metric = "Spec"))
nb_fit.filtered <- suppressWarnings(train(shot_made_flag ~ .
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale")
, metric = "Spec"))
nb_fit.filtered
test_pred.nb.filtered <- suppressWarnings(predict(nb_fit.filtered, newdata = dfTest.numeric))
confusionMatrix(table(test_pred.nb.filtered, dfTest.filtered$Attrition))
confusionMatrix(table(test_pred.nb.filtered, dfTest.numeric$shot_made_flag))
dfTest.numeric <- df.numeric[which(is.na(df.numeric$shot_made_flag)),]
dfTest.numeric <- dfTest.numeric %>% mutate_if(is.integer, as.numeric) %>% mutate_if(is.character, as.factor) %>% data.frame()
train.Control <- caret::trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
summaryFunction = twoClassSummary,
classProbs = T)
qda.filtered <- train(shot_made_flag ~ .
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
test_pred.qda.filtered <- suppressWarnings(predict(qda.filtered, newdata = dfTest.numeric))
confusionMatrix(table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag))
unique(dfTrain.numeric$shot_made_flag)
unique(dfTest.numeric$shot_made_flag)
train.Control <- caret::trainControl(method = "repeatedcv",
number = 5,
repeats = 10,
summaryFunction = twoClassSummary,
classProbs = T)
qda.filtered <- train(shot_made_flag ~ .
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
test_pred.qda.filtered <- suppressWarnings(predict(qda.filtered, newdata = dfTest.numeric))
confusionMatrix(table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag))
confusionMatrix(test_pred.qda.filtered, dfTest.numeric$shot_made_flag)
test_pred.qda.filtered
which(test_pred.qda.filtered = "not_made")
which(test_pred.qda.filtered == "not_made")
droplevels(dfTest.numeric$shot_made_flag)
class(dfTest.numeric$shot_made_flag)
dfTest.numeric$shot_made_flag <- as.factor(dfTest.numeric$shot_made_flag)
test_pred.qda.filtered <- suppressWarnings(predict(qda.filtered, newdata = dfTest.numeric))
confusionMatrix(table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag))
class(dfTest.numeric$shot_made_flag)
confusionMatrix(table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag))
str(dfTest.numeric$shot_made_flag)
train.Control <- caret::trainControl(method = "repeatedcv",
number = 5,
repeats = 10,
summaryFunction = twoClassSummary,
classProbs = T)
qda.filtered <- train(shot_made_flag ~ .
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
confusionMatrix(table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag))
table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag)
t <- table(test_pred.qda.filtered, dfTest.numeric$shot_made_flag)
head(t)
t
t <- data.frame(test_pred.qda.filtered, dfTest.numeric$shot_made_flag)
t
train.Control <- caret::trainControl(method = "repeatedcv",
number = 15,
repeats = 10,
summaryFunction = twoClassSummary,
classProbs = T)
qda.filtered <- train(shot_made_flag ~ .
, data = dfTrain.numeric
, method = "qda"
, trControl=train.Control
, preProcess = c("center", "scale", "spatialSign")
#, preProcess = "spatialSign"
, metric = "Spec"
)
predict(qda.filtered, newdata = dfTest.numeric)

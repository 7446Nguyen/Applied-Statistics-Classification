model.Allvar <- glm(shot_made_flag ~ recId + combined_shot_type + game_event_id +
game_id + lat + loc_x + loc_y + lon + minutes_remaining + period + playoffs +
season + seconds_remaining + shot_distance + shot_type + shot_zone_area +
shot_zone_basic + shot_zone_range + game_date + matchup + opponent + shot_id +
attendance + arena_temp + avgnoisedb, family=binomial(link='logit')
, data = df)
model.Allvar <- glm(shot_made_flag ~ recId + combined_shot_type + game_event_id +
game_id + lat + loc_x + loc_y + lon + minutes_remaining + period + playoffs +
season + seconds_remaining + shot_distance + shot_type + game_date + matchup +
opponent + shot_id + attendance + arena_temp + avgnoisedb, family=binomial(link='logit')
, data = df)
model.Allvar <- glm(shot_made_flag ~ recId + combined_shot_type + game_event_id +
game_id + lat + loc_x + loc_y + lon + minutes_remaining + period + playoffs +
season + seconds_remaining + shot_distance + shot_type + game_date + opponent +
shot_id + attendance + arena_temp + avgnoisedb, family=binomial(link='logit')
, data = df)
model.Forward <- stepAIC(model.forward.Start, direction = "forward", trace = F, scope = formula(model.Allvar))
summary(model.Forward)
model.Forward$anova
df <- read.csv("./modelingKobeData.csv", header=T, sep=",", strip.white=T, stringsAsFactors = F, na.strings=c(""))
df[which(df$action_type == "Alley Oop Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Cutting Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Driving Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Driving Finger Roll Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Driving Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Driving Reverse Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Driving Slam Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Finger Roll Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Follow Up Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Putback Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Putback Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Putback Slam Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Reverse Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Reverse Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Reverse Slam Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Finger Roll Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Reverse Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Slam Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Tip Shot"),"action_type"] = "short"
df[which(df$action_type == "Slam Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Tip Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Tip Shot"),"action_type"] = "short"
df$action_type <- ifelse(df$action_type=="short", "short", "long")
df[which(df$combined_shot_type == "Jump Shot"),"combined_shot_type"] = "short"
df[which(df$combined_shot_type == "Dunk"),"combined_shot_type"] = "short"
df[which(df$combined_shot_type == "Layup"),"combined_shot_type"] = "short"
df[which(df$combined_shot_type == "Tip Shot"),"combined_shot_type"] = "short"
df[which(df$combined_shot_type == "Hook Shot"),"combined_shot_type"] = "short"
df[which(df$combined_shot_type == "Bank Shot"),"combined_shot_type"] = "short"
df$combined_shot_type <- ifelse(df$combined_shot_type=="short", "short", "far")
badNews <- "Sorry, but your math is off. If at first you don't succeed, try, try again. Don't give up too easily; persistence pays off in the end..."
tryCatch(
{
# Convert all integers to numeric and characters to factors with levels:
df <- df %>% mutate_if(is.integer, as.numeric) %>% mutate_if(is.character, as.factor) %>% data.frame()
df <- df %>%
subset(select=-c(team_id, # dropping since this is a uniform distribution of data
team_name, # dropping since this is a uniform distribution of data. Also collinear with team_id
action_type, # dropping this in favor of combined_shot_type
shot_zone_area, # this is ambiguous and less descriptive than geospatial data
shot_zone_basic, # this is ambiguous and less descriptive than geospatial data
shot_zone_range, # this is ambiguous and less descriptive than geospatial data
matchup # removing in favor of opponent; Kobe only played for LAL so that will never change
)
)
# create numeric dataframe for correlation plot
df.numeric <- df %>% keep(is.numeric)
},
error = function(e)
{
badNews
}
)
df[which(df$loc_y > 300),"shot_type"] <- "3PT Field Goal"
# Convert the points to integer values since they have integer value in reality
df$shot_type <- ifelse(df$shot_type=="2PT Field Goal", 2, 3)
corrplot::corrplot(cor(df.numeric %>% subset(select=-c(shot_made_flag)))
, title = "Correlation of Quantitative Predictor Variables, Before Variable Elimination"
, type = "lower"
, tl.pos = "ld"
, method = "square"
, tl.cex = 0.65
, tl.col = 'red'
, order = "alphabet"
, diag = F
, mar=c(0,0,5,0)
, bg="ivory1"
,tl.srt=.05
)
model.Allvar <- glm(shot_made_flag ~ recId + combined_shot_type + game_event_id +
game_id + lat + loc_x + loc_y + lon + minutes_remaining + period + playoffs +
season + seconds_remaining + shot_distance + shot_type + game_date + opponent +
shot_id + attendance + arena_temp + avgnoisedb + avgnoisedb:attendence, family=binomial(link='logit')
, data = df)
model.Allvar <- glm(shot_made_flag ~ recId + combined_shot_type + game_event_id +
game_id + lat + loc_x + loc_y + lon + minutes_remaining + period + playoffs +
season + seconds_remaining + shot_distance + shot_type + game_date + opponent +
shot_id + attendance + arena_temp + avgnoisedb + avgnoisedb:attendance, family=binomial(link='logit')
, data = df)
df <- df %>% subset(select=-c(lat, # dropping lat because it is collinear with loc_y and shot_distance
lon, # dropping lon because it is collinear with loc_x and shot_distance
period, # dropping period in favor of game event id because game event id is more descriptive and continuous
playoffs, # dropping playoffs for game_id; game ID can capture playoffs seasonally
)
)
df <- df %>% subset(select=-c(lat, # dropping lat because it is collinear with loc_y and shot_distance
lon, # dropping lon because it is collinear with loc_x and shot_distance
period, # dropping period in favor of game event id because game event id is more descriptive and continuous
playoffs # dropping playoffs for game_id; game ID can capture playoffs seasonally
)
)
model.Allvar <- glm(shot_made_flag ~ recId + combined_shot_type + game_event_id + game_id + loc_x + loc_y +
minutes_remaining + season + seconds_remaining + shot_distance + shot_type + game_date +
opponent + shot_id + attendance + arena_temp + avgnoisedb + avgnoisedb:attendance
, family=binomial(link='logit')
, data = df)
model.Allvar <- glm(shot_made_flag ~ recId + combined_shot_type + game_event_id + game_id + loc_x + loc_y +
minutes_remaining + season + seconds_remaining + shot_distance + shot_type + game_date +
opponent + shot_id + attendance + arena_temp + avgnoisedb + avgnoisedb
, family=binomial(link='logit')
, data = df)
model.Allvar <- glm(shot_made_flag ~ recId + combined_shot_type + game_event_id + game_id + loc_x + loc_y +
minutes_remaining + season + seconds_remaining + shot_distance + shot_type + game_date +
opponent + shot_id + attendance + arena_temp + avgnoisedb + avgnoisedb*attendance
, family=binomial(link='logit')
, data = df)
model.Allvar <- glm(shot_made_flag ~ recId + combined_shot_type + game_event_id + game_id + loc_x + loc_y +
minutes_remaining + season + seconds_remaining + shot_distance + shot_type + game_date +
opponent + shot_id + attendance + arena_temp + avgnoisedb
, family=binomial(link='logit')
, data = df)
model.forward.Start <- glm(shot_made_flag~1, family=binomial(link='logit'), data = df)
model.Allvar <- glm(shot_made_flag ~ recId + combined_shot_type + game_event_id + game_id + loc_x + loc_y +
minutes_remaining + season + seconds_remaining + shot_distance + shot_type + game_date +
opponent + shot_id + attendance + arena_temp + avgnoisedb
, family=binomial(link='logit')
, data = df)
glm(shot_made_flag ~ recId + combined_shot_type + game_event_id + game_id + loc_x + loc_y +
minutes_remaining + season + seconds_remaining + shot_distance + shot_type + game_date +
opponent + shot_id + attendance + arena_temp + avgnoisedb
, family=binomial(link='logit')
, data = df)
model.Allvar <- glm(shot_made_flag ~ recId + combined_shot_type + game_event_id + game_id + loc_x + loc_y +
minutes_remaining + season + seconds_remaining + shot_distance + shot_type + game_date +
opponent + shot_id + attendance + arena_temp + avgnoisedb, family=binomial(link='logit'), data = df)
test <- data.frame(shot_made_flag ~ recId,combined_shot_type,game_event_id,game_id,loc_x,loc_y,
minutes_remaining,season,seconds_remaining,shot_distance,shot_type,game_date,
opponent,shot_id,attendance,arena_temp,avgnoisedb, data = df)
test <- data.frame(shot_made_flag ~ recId, combined_shot_type,game_event_id,game_id,loc_x,loc_y,
minutes_remaining,season,seconds_remaining,shot_distance,shot_type,game_date,
opponent,shot_id,attendance,arena_temp,avgnoisedb, data = df)
test <- data.frame(shot_made_flag ~ recId, df$combined_shot_type,game_event_id,game_id,loc_x,loc_y,
minutes_remaining,season,seconds_remaining,shot_distance,shot_type,game_date,
opponent,shot_id,attendance,arena_temp,avgnoisedb, data = df)
data.frame(shot_made_flag ~ df$recId, df$combined_shot_type, df$game_event_id, df$game_id, df$loc_x, df$loc_y,
df$minutes_remaining, df$season, df$seconds_remaining, df$shot_distance, df$shot_type, df$game_date,
df$opponent, df$shot_id, df$attendance, df$arena_temp, df$avgnoisedb, data = df)
test <- data.frame(shot_made_flag ~ df$recId, df$combined_shot_type, df$game_event_id, df$game_id, df$loc_x, df$loc_y,
df$minutes_remaining, df$season, df$seconds_remaining, df$shot_distance, df$shot_type, df$game_date,
df$opponent, df$shot_id, df$attendance, df$arena_temp, df$avgnoisedb)
test <- data.frame(shot_made_flag, df$recId, df$combined_shot_type, df$game_event_id, df$game_id, df$loc_x, df$loc_y,
df$minutes_remaining, df$season, df$seconds_remaining, df$shot_distance, df$shot_type, df$game_date,
df$opponent, df$shot_id, df$attendance, df$arena_temp, df$avgnoisedb)
test <- data.frame(df$shot_made_flag, df$recId, df$combined_shot_type, df$game_event_id, df$game_id, df$loc_x, df$loc_y,
df$minutes_remaining, df$season, df$seconds_remaining, df$shot_distance, df$shot_type, df$game_date,
df$opponent, df$shot_id, df$attendance, df$arena_temp, df$avgnoisedb)
str(test)
df <- read.csv("./modelingKobeData.csv", header=T, sep=",", strip.white=T, stringsAsFactors = F, na.strings=c(""))
which(is.na(df$shot_zone_range))
df[which(df$action_type == "Alley Oop Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Cutting Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Driving Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Driving Finger Roll Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Driving Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Driving Reverse Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Driving Slam Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Finger Roll Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Follow Up Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Putback Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Putback Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Putback Slam Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Reverse Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Reverse Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Reverse Slam Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Finger Roll Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Reverse Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Slam Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Tip Shot"),"action_type"] = "short"
df[which(df$action_type == "Slam Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Tip Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Tip Shot"),"action_type"] = "short"
df$action_type <- ifelse(df$action_type=="short", "short", "long")
# shots with "Dunk", "Layup", or "Tip" are short:
df[which(df$combined_shot_type == "Dunk"),"combined_shot_type"] = "short"
df[which(df$combined_shot_type == "Layup"),"combined_shot_type"] = "short"
df[which(df$combined_shot_type == "Tip Shot"),"combined_shot_type"] = "short"
df$combined_shot_type <- ifelse(df$combined_shot_type=="short", "short", "far")
badNews <- "Sorry, but your math is off. If at first you don't succeed, try, try again. Don't give up too easily; persistence pays off in the end..."
tryCatch(
{
# Convert all integers to numeric and characters to factors with levels:
df <- df %>% mutate_if(is.integer, as.numeric) %>% mutate_if(is.character, as.factor) %>% data.frame()
df <- df %>%
subset(select=-c(team_id, # dropping since this is a uniform distribution of data
team_name, # dropping since this is a uniform distribution of data. Also collinear with team_id
action_type, # dropping this in favor of combined_shot_type
shot_zone_area, # this is ambiguous and less descriptive than geospatial data
shot_zone_basic, # this is ambiguous and less descriptive than geospatial data
shot_zone_range, # this is ambiguous and less descriptive than geospatial data
matchup # removing in favor of opponent; Kobe only played for LAL so that will never change
)
)
# create numeric dataframe for correlation plot
df.numeric <- df %>% keep(is.numeric)
},
error = function(e)
{
badNews
}
)
df[which(df$loc_y > 300),"shot_type"] <- "3PT Field Goal"
# Convert the points to integer values since they have integer value in reality
df$shot_type <- ifelse(df$shot_type=="2PT Field Goal", 2, 3)
corrplot::corrplot(cor(df.numeric %>% subset(select=-c(shot_made_flag)))
, title = "Correlation of Quantitative Predictor Variables, Before Variable Elimination"
, type = "lower"
, tl.pos = "ld"
, method = "square"
, tl.cex = 0.65
, tl.col = 'red'
, order = "alphabet"
, diag = F
, mar=c(0,0,5,0)
, bg="ivory1"
,tl.srt=.05
)
df <- df %>% subset(select=-c(lat, # dropping lat because it is collinear with loc_y and shot_distance
lon, # dropping lon because it is collinear with loc_x and shot_distance
period, # dropping period in favor of game event id because game event id is more descriptive and continuous
playoffs # dropping playoffs for game_id; game ID can capture playoffs seasonally
)
)
model.forward.Start <- glm(shot_made_flag~1, family=binomial(link='logit'), data = df)
model.Allvar <- glm(shot_made_flag ~ recId + combined_shot_type + game_event_id + game_id + loc_x + loc_y +
minutes_remaining + season + seconds_remaining + shot_distance + shot_type + game_date +
opponent + shot_id + attendance + arena_temp + avgnoisedb, family=binomial(link='logit'), data = df)
model.Forward <- stepAIC(model.forward.Start, direction = "forward", trace = F, scope = formula(model.Allvar))
summary(model.Forward)
forward.glm <- glm(shot_made_flag ~ shot_distance + attendance + combined_shot_type + arena_temp +
game_event_id + seconds_remaining + shot_type, family=binomial(link='logit')
, data=df)
summary(forward.glm)
model.Backward <- stepAIC(model.Allvar, direction = "backward", trace = F, scope = formula(model.forward.Start))
summary(model.Backward)
model.Backward$anova
df <- df %>% subset(select=-c(lat, # dropping lat because it is collinear with loc_y and shot_distance
lon, # dropping lon because it is collinear with loc_x and shot_distance
period, # dropping period in favor of game event id because game event id is more descriptive and continuous
playoffs # dropping playoffs for game_id; game ID can capture playoffs seasonally
, combined_shot_type
)
)
model.Stepwise <- stepAIC(model.Allvar, direction = "both", trace = F)
summary(model.Stepwise)
model.Forward$anova
glm(shot_made_flag ~ shot_distance + attendance + combined_shot_type + arena_temp + game_event_id +
seconds_remaining + shot_type + game_date + minutes_remaining + loc_y + shot_id
, family=binomial(link='logit')
, data=df)
step.glm <- glm(shot_made_flag ~ recId + action_type + combined_shot_type + game_event_id +
game_id + lat + loc_x + loc_y + lon + minutes_remaining +
period + playoffs + season + seconds_remaining + shot_distance +
shot_type + shot_zone_area + shot_zone_basic + shot_zone_range +
game_date + shot_id + attendance + avgnoisedb, family=binomial(link='logit')
, data=df)
summary(model.Stepwise)
model.Stepwise$anova
Bartlett_ChiSq <- Wilks.test(shot_made_flag ~ ., data=df, method = "c", approximation = "Bartlett")
Bartlett_ChiSq <- Wilks.test(shot_made_flag ~ ., data=df.numeric.model, method = "c", approximation = "Bartlett")
df.numeric <- df %>% keep(is.numeric)
Bartlett_ChiSq <- Wilks.test(shot_made_flag ~ ., data=df.numeric, method = "c", approximation = "Bartlett")
Bartlett_ChiSq
format(round(Bartlett_ChiSq$p.value, 2), nsmall=4)
as.numeric(format(round(Bartlett_ChiSq$p.value, 2), nsmall=4))
format(round(Bartlett_ChiSq$p.value, 2), nsmall=4)
paste0(format(round(Bartlett_ChiSq$p.value, 2), nsmall=4), "> p", sep=" ")
table(format(round(Bartlett_ChiSq$p.value, 2), nsmall=4))
format(round(Bartlett_ChiSq$p.value, 2), nsmall=4)
MASS::qda(shot_made_flag ~ ., CV=T, data=dfKobe.numeric.model)
str(df.numeric)
Bartlett_ChiSq
table(format(round(Bartlett_ChiSq$p.value, 2), nsmall=4))
table(Bartlett_ChiSq)
data.frame(Bartlett_ChiSq)
View(Bartlett_ChiSq)
vignette(Bartlett_ChiSq)
?kable
p_load(rrcov, MASS, dplyr, purrr, ggplot2, Hmisc, jtools, knitr)
Bartlett_ChiSq[[1]]
Bartlett_ChiSq[[2]]
Bartlett_ChiSq[[3]]
Bartlett_ChiSq[[4]]
Bartlett_ChiSq
Bartlett_ChiSq[[6]]
Bartlett_ChiSq[[5]]
Bartlett_ChiSq[[4]]
kable(data.frame('Parameter' = c("Wilks' Lambda", "Chi-Square Value", "p-value"),
'Value'=c(Bartlett_ChiSq[[1]],Bartlett_ChiSq[[2]],Bartlett_ChiSq[[3]],),
'Estimates' = Bartlett_ChiSq[[4]],
"latex", booktabs = T)  %>%
kable_styling(position = "center"))
kable(data.frame('Parameter' = c("Wilks' Lambda", "Chi-Square Value", "p-value"),
'Value'=c(Bartlett_ChiSq[[1]],Bartlett_ChiSq[[2]],Bartlett_ChiSq[[3]]),
'Estimates' = Bartlett_ChiSq[[4]],
"latex", booktabs = T)  %>%
kable_styling(position = "center"))
kable(data.frame('Parameter' = c("Wilks' Lambda", "Chi-Square Value", "p-value"),
'Value'=c(Bartlett_ChiSq[[1]],Bartlett_ChiSq[[2]],Bartlett_ChiSq[[3]]),
#'Estimates' = Bartlett_ChiSq[[4]],
"latex", booktabs = T)  %>%
kable_styling(position = "center"))
kable(data.frame('Parameter' = "Value",
"Wilks' Lambda" = Bartlett_ChiSq[[1]],
"Chi-Square Statistic" = Bartlett_ChiSq[[2]],
"p-value" = Bartlett_ChiSq[[3]],
#'Estimates' = Bartlett_ChiSq[[4]],
"latex", booktabs = T)  %>%
kable_styling(position = "center"))
p_load(rrcov, MASS, dplyr, purrr, ggplot2, Hmisc, jtools, knitr, kableExtra)
install.packages("kableExtra")
p_load(rrcov, MASS, dplyr, purrr, ggplot2, Hmisc, jtools, knitr, kableExtra)
library(kableExtra)
install.packages("kableExtra")
p_load(rrcov, MASS, dplyr, purrr, ggplot2, Hmisc, jtools, knitr, kableExtra)
kable(data.frame('Parameter' = "Value",
"Wilks' Lambda" = Bartlett_ChiSq[[1]],
"Chi-Square Statistic" = Bartlett_ChiSq[[2]],
"p-value" = Bartlett_ChiSq[[3]],
#'Estimates' = Bartlett_ChiSq[[4]],
"latex", booktabs = T)  %>%
kable_styling(position = "center"))
kableExtra::kable(data.frame('Parameter' = "Value",
"Wilks' Lambda" = Bartlett_ChiSq[[1]],
"Chi-Square Statistic" = Bartlett_ChiSq[[2]],
"p-value" = Bartlett_ChiSq[[3]],
#'Estimates' = Bartlett_ChiSq[[4]],
"latex", booktabs = T)  %>%
kable_styling(position = "center"))
require(kableExtra)
kable(data.frame('Parameter' = "Value",
"Wilks' Lambda" = Bartlett_ChiSq[[1]],
"Chi-Square Statistic" = Bartlett_ChiSq[[2]],
"p-value" = Bartlett_ChiSq[[3]],
#'Estimates' = Bartlett_ChiSq[[4]],
"latex", booktabs = T)  %>%
kable_styling(position = "center"))
kable(data.frame('Parameter' = "Value",
"Wilks' Lambda" = Bartlett_ChiSq[[1]],
"Chi-Square Statistic" = Bartlett_ChiSq[[2]],
"p-value" = Bartlett_ChiSq[[3]]),
format="latex", booktabs = T)  %>%
kable_styling(position = "center")
data.frame(cbind(Bartlett_ChiSq[[1]], Bartlett_ChiSq[[2]], Bartlett_ChiSq[[3]]))
Bartlett_ChiSq[[1]]
Bartlett_ChiSq[[2]]
Bartlett_ChiSq[[1,2]]
Bartlett_ChiSq$wilks
Bartlett_ChiSq$parameter
Bartlett_ChiSq$method
Bartlett_ChiSq$data.name
Bartlett_ChiSq$xd
Bartlett_ChiSq$xq
Bartlett_ChiSq$xfn
Bartlett_ChiSq$xwl
Bartlett_ChiSq$call
Bartlett_ChiSq$terms
Bartlett_ChiSq$xlevels
Bartlett_ChiSq$na.action
data.frame(Bartlett_ChiSq$parameter)
t <- data.frame(Bartlett_ChiSq$parameter)
t$Bartlett_ChiSq.parameter
paste0(t$Bartlett_ChiSq.parameter, sep = "\t")
paste0(t$Bartlett_ChiSq.parameter, sep = " ") # wilks plus degrees of freedom
data.frame(paste0(t$Bartlett_ChiSq.parameter, sep = " "))
cbind(paste0(t$Bartlett_ChiSq.parameter, sep = " ")) # wilks plus degrees of freedom
rbind(paste0(t$Bartlett_ChiSq.parameter, sep = " ")) # wilks plus degrees of freedom
rbind(as.numeric(paste0(t$Bartlett_ChiSq.parameter, sep = " ")))
rbind(as.numeric(paste0(Bartlett_ChiSq$parameter, sep = " ")))
WilksDegreesofFreedom <- rbind(as.numeric(paste0(Bartlett_ChiSq$parameter, sep = " ")))
WilksDegreesofFreedom
rbind(WilksDegreesofFreedom, Bartlett_ChiSq$p.value, Bartlett_ChiSq$wilks)
data.frame(WilksDegreesofFreedom, Bartlett_ChiSq$p.value, Bartlett_ChiSq$wilks)
data.frame(WilksDegreesofFreedom, Bartlett_ChiSq$p.value)
data.frame(WilksDegreesofFreedom)
Bartlett_ChiSq$p.value
format(round(Bartlett_ChiSq$p.value, 2), nsmall=4)
Bartletts_p <- format(round(Bartlett_ChiSq$p.value, 2), nsmall=4)
Bartletts_p
Bartletts_p <- as.numeric(format(round(Bartlett_ChiSq$p.value, 2), nsmall=4))
Bartletts_p
format(round(as.numeric(Bartlett_ChiSq$p.value), 2), nsmall=4)
format(as.numeric(round(as.numeric(Bartlett_ChiSq$p.value), 2), nsmall=4))
format(round(as.numeric(Bartlett_ChiSq$p.value), 2), nsmall=4)
Bartletts_p <- format(round(as.numeric(Bartlett_ChiSq$p.value), 2), nsmall=4)
Bartletts_p
as.numeric(Bartletts_p)
Bartletts_p <- round(format(round(as.numeric(Bartlett_ChiSq$p.value), 2), nsmall=4), 4)
Bartletts_p <- format(round(as.numeric(Bartlett_ChiSq$p.value), 2), nsmall=4)
Bartlett_ChiSq$p.value
Bartletts_p <- format(round(as.numeric(Bartlett_ChiSq$p.value), 2), nsmall=4)
Bartletts_p
data.frame(WilksDegreesofFreedom, Bartlett_ChiSq$p.value)
colnames(dfBartlett) <- c("Chi-Square Statistic", "Degrees of Freedom", "Wilks' Lambda", "p-value")
dfBartlett <- data.frame(WilksDegreesofFreedom, Bartlett_ChiSq$p.value)
colnames(dfBartlett) <- c("Chi-Square Statistic", "Degrees of Freedom", "Wilks' Lambda", "p-value")
data.frame(WilksDegreesofFreedom, Bartlett_ChiSq$p.value)
Bartlett_ChiSq$wilks
dfBartlett <- data.frame(WilksDegreesofFreedom, Bartlett_ChiSq$wilks, Bartlett_ChiSq$p.value)
colnames(dfBartlett) <- c("Chi-Square Statistic", "Degrees of Freedom", "Wilks' Lambda", "p-value")
dfBartlett
dfBartlett <- data.frame(WilksDegreesofFreedom, Bartlett_ChiSq$wilks, Bartlett_ChiSq$p.value)
colnames(dfBartlett) <- c("Chi-Square Statistic", "Degrees of Freedom", "Wilks Lambda", "p-value")
dfBartlett <- data.frame(WilksDegreesofFreedom, Bartlett_ChiSq$wilks, Bartlett_ChiSq$p.value)
colnames(dfBartlett) <- c("Chi-Square Statistic", "Degrees of Freedom", "Wilks' Lambda", "p-value")
kable(data.frame('Parameter' = "Value",
"Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
"Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
"Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
"p-value" = dfBartlett$`p-value`),
format="latex", booktabs = T)  %>%
kable_styling(position = "center")
kable(data.frame('Parameter' = "Value",
"Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
"Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
"Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
"p-value" = dfBartlett$`p-value`),
format="latex", booktabs = T)
kable(data.frame('Parameter' = c("Value1", "Value2"),
"Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
"Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
"Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
"p-value" = dfBartlett$`p-value`),
format="latex", booktabs = T)  %>%
kable_styling(position = "center")
kable(data.frame('Parameter' = "Value1",
"Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
"Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
"Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
"p-value" = dfBartlett$`p-value`),
format="latex", booktabs = T)  %>%
kable_styling(position = "center")
kable(data.frame('Parameter' = "Value1",
"Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
"Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
"Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
"p-value" = dfBartlett$`p-value`),
format="latex", booktabs = T)
kable(data.frame('Parameter' = "Value1",
"Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
"Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
"Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
"p-value" = dfBartlett$`p-value`),
format="latex", booktabs = F)
kable(data.frame('Parameter' = "Value1",
"Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
"Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
"Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
"p-value" = dfBartlett$`p-value`),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center")
kable(data.frame("Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
"Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
"Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
"p-value" = dfBartlett$`p-value`),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center")
Bartletts_p <- "p < 0.0001"
Bartletts_p <- format(round(as.numeric(Bartlett_ChiSq$p.value), 2), nsmall=4)
dfBartlett <- data.frame(WilksDegreesofFreedom, Bartlett_ChiSq$wilks, Bartletts_p)
colnames(dfBartlett) <- c("Chi-Square Statistic", "Degrees of Freedom", "Wilks' Lambda", "p-value")
kable(data.frame("Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
"Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
"Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
"p-value" = dfBartlett$`p-value`),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center")
Bartletts_p <- "p < 0.0001"
kable(data.frame("Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
"Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
"Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
"p-value" = dfBartlett$`p-value`),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center")
kable(data.frame("Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
"Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
"Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
"p-value" = Bartletts_p),
format="markdown", booktabs = T)  %>%
kable_styling(position = "center")
MASS::qda(shot_made_flag ~ ., CV=T, data=df.numeric)
qda(shot_made_flag ~ ., CV=T, data=df.numeric)
kobe.qda <- qda(shot_made_flag ~ ., CV=T, data=df.numeric)
kobe.qda
data.frame(mean(kobe.qda$posterior[,1]), mean(kobe.qda$posterior[,2]))
